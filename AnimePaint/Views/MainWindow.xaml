<metro:MetroWindow x:Class="AnimePaint.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:v="clr-namespace:AnimePaint.Views"
        xmlns:vm="clr-namespace:AnimePaint.ViewModels"
        xmlns:metro="http://schemes.grabacr.net/winfx/2014/controls"
        xmlns:AnimePaint="clr-namespace:AnimePaint"
        x:Name="MainView"
        Title="AnimePaint" Height="540" Width="960"
        Background="{DynamicResource ThemeBrushKey}"
		Foreground="{DynamicResource ActiveForegroundBrushKey}"
        IsRestoringWindowPlacement="True"
		UseLayoutRounding="True"
		TextOptions.TextFormattingMode="Display">

    <metro:MetroWindow.DataContext>
        <vm:MainWindowViewModel/>
    </metro:MetroWindow.DataContext>

    <i:Interaction.Triggers>

        <!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
        <!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
        <!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています -->

        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>

        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->

    </i:Interaction.Triggers>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <Border Grid.Row="0"
			metro:MetroWindow.IsCaptionBar="True">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>

                <!--アイコン-->
                <metro:CaptionIcon Grid.Column="0">
                    <!--<Ellipse Width="18"
						Height="18"
						Fill="{DynamicResource ActiveForegroundBrushKey}" />
                    -->
                    <Viewbox>
                        <Grid x:Name="LayoutRoot">
                            <Rectangle Fill="#FF286FF0" HorizontalAlignment="Left" Height="18" Stroke="#FFF0DC28" VerticalAlignment="Top" Width="18" StrokeThickness="1" StrokeLineJoin="Round" RadiusX="3" RadiusY="3"/>
                            <TextBlock HorizontalAlignment="Center" Height="18" TextWrapping="Wrap" Text="Ap" VerticalAlignment="Center" Width="18" FontSize="12" FontFamily="Segoe UI Light" TextAlignment="Center" Foreground="#FFF0DC28"/>
                        </Grid>
                    </Viewbox>
                </metro:CaptionIcon>

                <TextBlock Grid.Column="1"
					Text="{Binding Title, ElementName=MainView}"
					TextTrimming="CharacterEllipsis"
					Foreground="{DynamicResource ForegroundBrushKey}"
					FontFamily="Segoe UI Light"
					FontSize="18"
					Margin="3,0,0,0"
					VerticalAlignment="Center" />
                <metro:SystemButtons Grid.Column="2"
					VerticalAlignment="Top" />
            </Grid>
        </Border>

        <!--メインコンテンツ-->
        <Grid Grid.Row="1" Margin="6,0">
            <Grid.RowDefinitions>
                <RowDefinition Height="80"/>
                <RowDefinition Height="30"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>

            <!--リボン-->
            <TabControl Grid.Column="0" Grid.ColumnSpan="4"
				Grid.Row="0" FontSize="12">
                <TabItem Header="ファイル(_F)">
                    <StackPanel Orientation="Horizontal" Margin="3">
                        <Button>
                            <StackPanel>
                                <AnimePaint:NewItemIcon Height="30"/>
                                <TextBlock Text="新規作成" Style="{StaticResource RibbonTextStyleKey}"/>
                            </StackPanel>
                        </Button>

                        <Button>
                            <StackPanel>
                                <AnimePaint:OpenFileIcon Height="30"/>
                                <TextBlock Text="開く" Style="{StaticResource RibbonTextStyleKey}"/>
                            </StackPanel>
                        </Button>

                        <Button>
                            <StackPanel>
                                <AnimePaint:SaveFileIcon Height="30"/>
                                <TextBlock Text="保存" Style="{StaticResource RibbonTextStyleKey}"/>
                            </StackPanel>
                        </Button>
                    </StackPanel>
                </TabItem>

                <TabItem Header="編集(_E)">
                    <StackPanel Orientation="Horizontal" Margin="3">

                    </StackPanel>
                </TabItem>

            </TabControl>

            <!--よく使うやつ-->
            <StackPanel Orientation="Horizontal" Margin="1" Grid.Column="0" Grid.ColumnSpan="4"
                        Grid.Row="1">
                <Button>
                    <AnimePaint:UndoIcon/>
                </Button>

                <Button RenderTransformOrigin="0.5,0.5">
                    <Button.RenderTransform>
                        <TransformGroup>
                            <ScaleTransform ScaleY="1" ScaleX="-1"/>
                            <SkewTransform AngleY="0" AngleX="0"/>
                            <RotateTransform Angle="0"/>
                            <TranslateTransform/>
                        </TransformGroup>
                    </Button.RenderTransform>
                    <AnimePaint:UndoIcon/>
                </Button>
                
                <TextBlock Text="ブラシサイズ:" VerticalAlignment="Center" Margin="5,0,0,0"/>
                <metro:PromptTextBox Text="{Binding BrushSize}" Prompt="サイズ"/>

            </StackPanel>

            <!--ツール-->
            <StackPanel Grid.Column="0"
				Grid.Row="2">
                <RadioButton Height="30" Style="{StaticResource ButtonLikeRadioButtonStyleKey}" IsChecked="True" >
                    <AnimePaint:BrushIcon/>
                </RadioButton>

                <RadioButton Height="30" Style="{StaticResource ButtonLikeRadioButtonStyleKey}" >
                    <AnimePaint:EraserIcon/>
                </RadioButton>

                <RadioButton Height="30" Style="{StaticResource ButtonLikeRadioButtonStyleKey}" >
                    <AnimePaint:PersonPathIcon/>
                </RadioButton>
            </StackPanel>

            <!--メイン-->
            <ScrollViewer Grid.Column="1"
				Grid.Row="2" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto">
                <Grid Background="White">
                    <Canvas Height="{Binding Height}" Width="{Binding Width}">
                        <Thumb Width="30" Height="30" Style="{StaticResource CircleThumbStyleKey}"/>
                    </Canvas>
                </Grid>
            </ScrollViewer>

            <!--レイヤー-->
            <ScrollViewer Grid.Column="2"
				Grid.Row="2" VerticalScrollBarVisibility="Auto">
                <StackPanel>
                    <!--仮,listboxを使う-->
                    <StackPanel Orientation="Horizontal">
                        <CheckBox/>
                        <metro:PromptTextBox Text="レイヤー1"/>
                        <Viewbox>
                            <Rectangle Width="32" Height="18"
								Fill="{DynamicResource ActiveForegroundBrushKey}"/>
                        </Viewbox>
                    </StackPanel>
                </StackPanel>
            </ScrollViewer>
        </Grid>

        <Grid Grid.Row="2"
			Background="{DynamicResource AccentBrushKey}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <metro:ResizeGrip Grid.Column="1" />
        </Grid>
    </Grid>
</metro:MetroWindow>
